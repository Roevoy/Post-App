// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using POST.DAL;

#nullable disable

namespace POST.DAL.Migrations
{
    [DbContext(typeof(PostDbContext))]
    [Migration("20250321171750_Mig1")]
    partial class Mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("POST.Core.Abstractions.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("DestinationType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Destinations");

                    b.HasDiscriminator<string>("DestinationType").HasValue("Destination");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("POST.Core.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.HasIndex("City", "Street");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("POST.Core.Models.Box", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("POST.Core.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThirdName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Phone");

                    b.HasIndex("FirstName", "SecondName");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("POST.Core.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThirdName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FirstName", "SecondName");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("POST.Core.Models.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentSenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParcelLockerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentSenderId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("ParcelLockerId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("POST.Core.Models.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParcelLockerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ParcelLockerId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("POST.Core.Models.Department", b =>
                {
                    b.HasBaseType("POST.Core.Abstractions.Destination");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Department");
                });

            modelBuilder.Entity("POST.Core.Models.ParcelLocker", b =>
                {
                    b.HasBaseType("POST.Core.Abstractions.Destination");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("ParcelLocker");
                });

            modelBuilder.Entity("POST.Core.Abstractions.Destination", b =>
                {
                    b.HasOne("POST.Core.Models.Address", "Address")
                        .WithMany("Destinations")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("POST.Core.Models.Box", b =>
                {
                    b.HasOne("POST.Core.Models.Shipment", "Shipment")
                        .WithMany("Boxes")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("POST.Core.Models.Employee", b =>
                {
                    b.HasOne("POST.Core.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("POST.Core.Models.Shipment", b =>
                {
                    b.HasOne("POST.Core.Models.Department", null)
                        .WithMany("ExpectedShipments")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("POST.Core.Models.Department", "DepartmentSender")
                        .WithMany("SentShipments")
                        .HasForeignKey("DepartmentSenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("POST.Core.Abstractions.Destination", "Destination")
                        .WithMany("ExceptedShipments")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("POST.Core.Models.ParcelLocker", null)
                        .WithMany("ExpectedShipments")
                        .HasForeignKey("ParcelLockerId");

                    b.HasOne("POST.Core.Models.Client", "Receiver")
                        .WithMany("ExpectedShipments")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("POST.Core.Models.Client", "Sender")
                        .WithMany("SentShipments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DepartmentSender");

                    b.Navigation("Destination");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("POST.Core.Models.Slot", b =>
                {
                    b.HasOne("POST.Core.Models.ParcelLocker", "ParcelLocker")
                        .WithMany("Slots")
                        .HasForeignKey("ParcelLockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParcelLocker");
                });

            modelBuilder.Entity("POST.Core.Abstractions.Destination", b =>
                {
                    b.Navigation("ExceptedShipments");
                });

            modelBuilder.Entity("POST.Core.Models.Address", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("POST.Core.Models.Client", b =>
                {
                    b.Navigation("ExpectedShipments");

                    b.Navigation("SentShipments");
                });

            modelBuilder.Entity("POST.Core.Models.Shipment", b =>
                {
                    b.Navigation("Boxes");
                });

            modelBuilder.Entity("POST.Core.Models.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("ExpectedShipments");

                    b.Navigation("SentShipments");
                });

            modelBuilder.Entity("POST.Core.Models.ParcelLocker", b =>
                {
                    b.Navigation("ExpectedShipments");

                    b.Navigation("Slots");
                });
#pragma warning restore 612, 618
        }
    }
}
